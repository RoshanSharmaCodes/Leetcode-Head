Rabin-Karp Algorithm (For Matching String Pattern)

As mentioned above this algorithm helps in matching patterns in string (one string in another string).
For Example: str1 = "deg" str2 = "djhkjhdeglho"

The Rabin Karp algorithm matches the hash value of the pattern with the hash value of the current substring of text, and if the hash values match then only it starts matching individual characters. 
So Rabin Karp algorithm needs to calculate hash values for the following strings.

1. Pattern itself
2. All the substrings of the text of length m which is the size of pattern.

In simple words we assign hash values to all the characters in parent string, firstly we calculate the hash value of the pattern to be found, and then we create a sliding window which search for exact hash
value in the parent string.

Resources:
Video: https://www.youtube.com/watch?v=qQ8vS2btsxI&t=993s
Blog: https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/

Code in JS:

// Following program is a Javascript implementation 
// of Rabin Karp Algorithm given in the CLRS book 
 
// d is the number of characters in
// the input alphabet 
let d = 256; 
 
/* pat -> pattern 
    txt -> text 
    q -> A prime number 
*/
function search(pat, txt, q) 
{ 
    let M = pat.length; 
    let N = txt.length; 
    let i, j; 
     
    // Hash value for pattern 
    let p = 0; 
     
    // Hash value for txt 
    let t = 0; 
    let h = 1; 
 
    // The value of h would be "pow(d, M-1)%q" 
    for(i = 0; i < M - 1; i++) 
        h = (h * d) % q; 
 
    // Calculate the hash value of pattern and 
    // first window of text 
    for(i = 0; i < M; i++) 
    { 
        p = (d * p + pat[i].charCodeAt()) % q; 
        t = (d * t + txt[i].charCodeAt()) % q; 
    } 
 
    // Slide the pattern over text one by one 
    for(i = 0; i <= N - M; i++) 
    { 
 
        // Check the hash values of current
        // window of text and pattern. If the
        // hash values match then only 
        // check for characters one by one 
        if (p == t) 
        { 
             
            /* Check for characters one by one */
            for(j = 0; j < M; j++) 
            { 
                if (txt[i+j] != pat[j]) 
                    break; 
            } 
 
            // if p == t and pat[0...M-1] = 
            // txt[i, i+1, ...i+M-1] 
            if (j == M) 
                 document.write("Pattern found at index " + 
                                i + "<br/>"); 
        } 
 
        // Calculate hash value for next window 
        // of text: Remove leading digit, add 
        // trailing digit 
        if (i < N - M) 
        { 
            t = (d * (t - txt[i].charCodeAt() * h) + 
                      txt[i + M].charCodeAt()) % q; 
 
            // We might get negative value of t, 
            // converting it to positive 
            if (t < 0) 
                t = (t + q); 
        } 
    } 
} 
 
// Driver code
let txt = "GEEKS FOR GEEKS";
let pat = "GEEK";
 
// A prime number
let q = 101; 
 
// Function Call
search(pat, txt, q);
 
// This code is contributed by target_2
