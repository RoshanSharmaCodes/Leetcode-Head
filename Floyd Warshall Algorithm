What is Floyd Warshall Algorithm?

The Floyd Warshall Algorithm is an all pair shortest path algorithm unlike Dijkstra and Bellman Ford which are single source shortest path algorithms. 
This algorithm works for both the directed and undirected weighted graphs. But, it does not work for the graphs with negative cycles (where the sum of the edges in a cycle is negative). 
It follows Dynamic Programming approach to check every possible path going via every possible node in order to calculate shortest distance between every pair of nodes.

Algorithm:
1. Initialize the solution matrix same as the input graph matrix as a first step. 
2. Then update the solution matrix by considering all vertices as an intermediate vertex. 
3. The idea is to pick all vertices one by one and updates all shortest paths which include the picked vertex as an intermediate vertex in the shortest path. 
4. When we pick vertex number k as an intermediate vertex, we already have considered vertices {0, 1, 2, .. k-1} as intermediate vertices. 
5. For every pair (i, j) of the source and destination vertices respectively, there are two possible cases. 
  i) k is not an intermediate vertex in shortest path from i to j. We keep the value of dist[i][j] as it is. 
  ii) k is an intermediate vertex in shortest path from i to j. We update the value of dist[i][j] as dist[i][k] + dist[k][j], if dist[i][j] > dist[i][k] + dist[k][j]

Code:
// A JavaScript program for Floyd Warshall All
      // Pairs Shortest Path algorithm.
 
      var INF = 99999;
      class AllPairShortestPath {
        constructor() {
          this.V = 4;
        }
 
        floydWarshall(graph) {
          var dist = Array.from(Array(this.V), () => new Array(this.V).fill(0));
          var i, j, k;
 
          // Initialize the solution matrix
          // same as input graph matrix
          // Or we can say the initial
          // values of shortest distances
          // are based on shortest paths
          // considering no intermediate
          // vertex
          for (i = 0; i < this.V; i++) {
            for (j = 0; j < this.V; j++) {
              dist[i][j] = graph[i][j];
            }
          }
 
          /* Add all vertices one by one to
        the set of intermediate vertices.
        ---> Before start of a iteration,
            we have shortest distances
            between all pairs of vertices
            such that the shortest distances
            consider only the vertices in
            set {0, 1, 2, .. k-1} as
            intermediate vertices.
        ---> After the end of a iteration,
            vertex no. k is added
            to the set of intermediate
            vertices and the set
            becomes {0, 1, 2, .. k} */
          for (k = 0; k < this.V; k++) {
            // Pick all vertices as source
            // one by one
            for (i = 0; i < this.V; i++) {
              // Pick all vertices as destination
              // for the above picked source
              for (j = 0; j < this.V; j++) {
                // If vertex k is on the shortest
                // path from i to j, then update
                // the value of dist[i][j]
                if (dist[i][k] + dist[k][j] < dist[i][j]) {
                  dist[i][j] = dist[i][k] + dist[k][j];
                }
              }
            }
          }
 
          // Print the shortest distance matrix
          this.printSolution(dist);
        }
 
        printSolution(dist) {
          document.write(
            "Following matrix shows the shortest " +
              "distances between every pair of vertices<br>"
          );
          for (var i = 0; i < this.V; ++i) {
            for (var j = 0; j < this.V; ++j) {
              if (dist[i][j] == INF) {
                document.write(" INF ");
              } else {
                document.write("  " + dist[i][j] + " ");
              }
            }
 
            document.write("<br>");
          }
        }
      }
      // Driver Code
      /* Let us create the following
        weighted graph
            10
        (0)------->(3)
        |         /|\
        5 |         |
        |         | 1
        \|/         |
        (1)------->(2)
            3             */
      var graph = [
        [0, 5, INF, 10],
        [INF, 0, 3, INF],
        [INF, INF, 0, 1],
        [INF, INF, INF, 0],
      ];
 
      var a = new AllPairShortestPath();
 
      // Print the solution
      a.floydWarshall(graph);
       
      // This code is contributed by rdtaank.
